@page
@model Projeto_RazorPage_Padaria.Pages.Sales.CreateModel

@{
    ViewData["Title"] = "Create";

}
<style>
    tr{
        transition:0.5s;
    }
    tr:hover{
        cursor:pointer;
        background-color: #fofofo;
    }
</style>

<div class="container bg-dark">
<h4 class="text-light">New Sale</h4>
<hr class="text-light"/>
    <div class="col">
        <form method="post" id="formCreateSale">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row d-none">
                <div class="col-6">
                    <div class="form-group">
                        <label asp-for="Sales.Buyer.Name!" class="control-label">Customer:</label>
                        <div class="input-group mb-3">
                            <input type="text" id="customer-id" asp-for="SaleRequestModel.CustomerId" class="form-control disabled" name="CustomerId" readonly placeholder="Customer" aria-label="Customer" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#customers-modal"><i class="bi bi-search"></i></button>
                            </div>
                        </div>
                        <span asp-validation-for="Sales.Buyer.Name!" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label asp-for="Sales.Buyer.Name!" class="control-label">Customer:</label>
                        <div class="input-group mb-3">
                            <input type="text" id="customer-field" class="form-control disabled" readonly placeholder="Customer" aria-label="Customer" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#customers-modal"><i class="bi bi-search"></i></button>
                            </div>
                        </div>
                        <span asp-validation-for="Sales.Buyer.Name!" class="text-danger"></span>
                    </div>
                    </div>
                    <div class="col-4">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="Sales.PaymentForm" class="control-label">Payment Form</label>
                        <select asp-for="SaleRequestModel.PaymentForm" id="paymentOption" class="form-control" asp-items="Model.PaymentFormsAvailable">
                        </select>
                        <span asp-validation-for="Sales.PaymentForm" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="container mt-5">
                <h3>Selected Products</h3>
                <table id="mainTable" class="table table-dark">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        
                    </tbody>
                </table>
                <div class="row">
                    <div class="col-sm-3 mt-4 mb-4">
                    <div class="form-group">
                        <label class="text-light">Total Price</label>
                        <input class="form-control disabled" id="product-price" disabled />
                    </div>
                    </div>
                </div>
                <!-- Button to open modal -->
                <button id="openModal" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal">
                    Select Products
                </button>
            </div>
            <div class="form-group mt-3 mb-5">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
        <div class="modal fade bd-example-modal-lg" id="customers-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content bg-dark">
                    <div class="modal-header">
                        <h5 class="modal-title text-light" id="exampleModalLabel">Select this sale´s </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped table-dark">
                            <thead ondblclick="">
                                <tr>
                                    <th>
                                        Id
                                    </th>
                                    <th>
                                        Name
                                    </th>
                                    <th>
                                        Document
                                    </th>
                                    <th>
                                        Points
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.CostumerList)
                                {
                                    <tr ondblclick="setSelectedObject(new Customer('@item.Id', '@item.Name', '@item.Document', '@item.Points'))">
                                        <td>
                                            @Html.DisplayFor(modelitem => item.Id)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelitem => item.Name)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelitem => item.Document)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelitem => item.Points)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content bg-dark">
                    <div class="modal-header">
                        <h5 class="modal-title text-light" id="modalTitle">Select Products</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped table-dark">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Price</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in Model.ProductList)
                                {
                                    <tr>
                                        <td><input type="checkbox" class="product-check" data-id="@product.Id" data-name="@product.Description" data-price="@product.Price"/></td>
                                        <td>@product.Description</td>
                                        <td>@product.Price</td>
                                        <td><input type="number" class="form-control product-quantity" data-id="@product.Id" disabled min="1" /></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="confirmSelection" class="btn btn-success" data-bs-dismiss="modal">Confirm Selection</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div>
</div>
    <a asp-page="Index">Back to List</a>
</div>
</div>
<script>
    const customerField = document.getElementById("customer-field");
    const customerId = document.getElementById("customer-id");
    const paymentForm = document.getElementById("paymentOption")
    class Customer {
        constructor(id, name, points, document) {
            this.id = id;
            this.name = name;
            this.points = points;
            this.document = document;
        }
    }
    function setSelectedObject(customer) {
        customerField.value = customer.name;
        customerId.value = customer.id;

        let myModalEl = document.getElementById('customers-modal');
        let modal = bootstrap.Modal.getInstance(myModalEl);
        if (modal) {
            modal.hide();
        } else {
            let newModal = new bootstrap.Modal(myModalEl);
            newModal.hide();
        }
    }
    document.addEventListener('DOMContentLoaded', function () {

        let selectedProducts = [];
        let confirmButton = document.getElementById('confirmSelection');
        let mainTableBody = document.querySelector('#mainTable tbody');
        let priceField = document.getElementById("product-price");
        const formSale = document.getElementById("formCreateSale")
 
        let totalPrice = 0.00;

        formSale.addEventListener('submit', (event) => {
            event.preventDefault()
            saleInfo = {
                customerId: parseInt(customerId.value),
                paymentForm:paymentForm.value,
                salesItems: selectedProducts.map(product => ({
                    id: product.id,
                    description: product.description,  
                    price: product.price,
                    quantity: product.quantity  
                }))
            }
            
            try{
                const notyf = new Notyf()
                fetch('/Sales/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(saleInfo)
                })
                    .then(response => {
                        if (response.ok) {
                            notyf.success("Sale Created")
                        } else {
                            return response.text().then(text => {notyf.error(`Something went wrong ${text}`) });
                            
                            
                        }
                    })
                    .catch(error => console.error("Fetch Error:", error));
            }catch(ex){
                console.log(ex.message)
            }
            
        })


        function updateProductChecks() {
            let productChecks = document.querySelectorAll('.product-check');
            productChecks.forEach(function (checkbox) {
                checkbox.addEventListener('change', function () {
                    let productId = this.dataset.id;
                    let quantityField = document.querySelector('.product-quantity[data-id="' + productId + '"]');
                    if (this.checked) {
                        quantityField.value = '';
                        quantityField.disabled = false;
                        
                    } else {
                        quantityField.value = '';
                        quantityField.disabled = true;
                    }
                });
            });
        }

        confirmButton.addEventListener('click', function () {
            selectedProducts = [];
            totalPrice = 0.00; // Reset total price before recalculating

            let productChecks = document.querySelectorAll('.product-check');
            productChecks.forEach(function (checkbox) {
                if (checkbox.checked) {
                    let productName = checkbox.dataset.name;
                    let productId = checkbox.dataset.id;
                    let productPrice = parseFloat(checkbox.dataset.price);
                    let quantityField = document.querySelector('.product-quantity[data-id="' + productId + '"]');
                    let quantity = parseInt(quantityField.value) || 0; // Handle empty quantity

                    if (quantity > 0) {
                        selectedProducts.push({
                            id: parseInt(productId),
                            description: productName,
                            price: parseFloat(productPrice),
                            quantity: parseInt(quantity)
                        });
                    }
                }
            });

            updateMainTable(selectedProducts);
            updateTotalPrice(selectedProducts);
        });

        function updateMainTable(products) {
            while (mainTableBody.firstChild) {
                mainTableBody.removeChild(mainTableBody.firstChild);
            }

            products.forEach(function (product) {
                let row = document.createElement('tr');
                row.innerHTML = '<td>' + product.description + '</td><td>' + product.quantity + '</td>' + '<td>' + (product.price * product.quantity).toFixed(2) + '</td>';
                mainTableBody.appendChild(row);
            });
        }

        function updateTotalPrice(products) {
            totalPrice = 0.00; // Reset the total price before calculating
            products.forEach(function (product) {
                totalPrice += product.quantity * product.price;
            });

            // Update the total price field with the correct format
            priceField.value = totalPrice.toFixed(2);
        }

        updateProductChecks();
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
